%% Step 1: Compare the Frequency Content of Two Audio Files

% Load the two audio files
x1 = audioread('audiosamples/task1sig.wav'); % Read first audio file
x2 = audioread('audiosamples/task2sig.wav'); % Read second audio file

fs1 = 44100; % Sample rate for first file (assumed 44.1 kHz)
fs2 = 44100; % Sample rate for second file (assumed same)

% Compute FFT and plot Magnitude Spectrum for File 1
figure;
subplot(2,1,1); % Create subplot for first audio file
n1 = length(x1); % Get the number of samples in first file
f1 = (0:n1-1)*(fs1/n1);  % Compute frequency vector for FFT
X1 = fft(x1);  % Compute the Fast Fourier Transform (FFT)
magnitude1 = abs(X1); % Get magnitude spectrum
plot(f1(1:floor(n1/2)), magnitude1(1:floor(n1/2))); % Plot only positive frequencies
xlabel('Frequency (Hz)');
ylabel('Magnitude');
title('Magnitude Spectrum of Audio File 1');

% Compute FFT and plot Magnitude Spectrum for File 2
subplot(2,1,2); % Create subplot for second audio file
n2 = length(x2); % Get number of samples in second file
f2 = (0:n2-1)*(fs2/n2);  % Compute frequency vector for second file
X2 = fft(x2);  % Compute FFT
magnitude2 = abs(X2); % Get magnitude spectrum
plot(f2(1:floor(n2/2)), magnitude2(1:floor(n2/2))); % Plot only positive frequencies
xlabel('Frequency (Hz)');
ylabel('Magnitude');
title('Magnitude Spectrum of Audio File 2');

% Compute and Plot Phase Spectrum for File 1
figure;
subplot(2,1,1); % Create subplot for first file
phase1 = angle(X1); % Compute phase spectrum (angle of FFT)
plot(f1(1:floor(n1/2)), phase1(1:floor(n1/2))); % Plot phase spectrum
xlabel('Frequency (Hz)');
ylabel('Phase (radians)');
title('Phase Spectrum of Audio File 1');

% Compute and Plot Phase Spectrum for File 2
subplot(2,1,2); % Create subplot for second file
phase2 = angle(X2); % Compute phase spectrum
plot(f2(1:floor(n2/2)), phase2(1:floor(n2/2))); % Plot phase spectrum
xlabel('Frequency (Hz)');
ylabel('Phase (radians)');
title('Phase Spectrum of Audio File 2');

%% Step 2: Apply a Low-pass Filter to an Audio File

% Check if file exists before loading to prevent errors
filter_file = 'audiosamples/task1sig.wav'; % File path


% Load the audio file
x = audioread(filter_file); % Read the file
fs = 44100; % Sample rate assumed to be 44.1 kHz

% Normalize the audio signal between -1 and 1
x = x / max(abs(x)); 

% Set filter parameters
fc = 1000; % Cutoff frequency in Hz
order = 4; % Filter order

% Design the Butterworth low-pass filter
Wn = fc / (fs / 2); % Normalize cutoff frequency
[b, a] = butter(order, Wn, 'low'); % Create filter coefficients

% Apply the filter to the audio signal
y = filter(b, a, x); % Apply filter using digital filter function

% Save the filtered audio to a new file
audiowrite('filtered_audio.wav', y, fs); % Write output file

% Compute and Plot the filter frequency response
[H, f] = freqz(b, a, 2048, fs); % Compute frequency response
figure;
subplot(2,1,1); % Create subplot for magnitude response
plot(f, abs(H)); % Plot magnitude response
title('Magnitude Response of the Filter');
xlabel('Frequency (Hz)');
ylabel('Magnitude');

subplot(2,1,2); % Create subplot for phase response
plot(f, angle(H)); % Plot phase response
title('Phase Response of the Filter');
xlabel('Frequency (Hz)');
ylabel('Phase (radians)');

%% Step 3: Apply Convolution Reverb to an Audio File

% Define the input and impulse response file paths
audio_file = 'task1sig_to_apply_reverb.wav'; % Input audio file
ir_file = 'impulse_response.wav'; % Impulse response file

% Check if both files exist before proceeding
if ~isfile(audio_file)
    error('File %s not found.', audio_file);
end
if ~isfile(ir_file)
    error('Impulse response file %s not found.', ir_file);
end

% Load the original audio file
x = audioread(audio_file); % Read input audio file
x = x / max(abs(x)); % Normalize signal to prevent clipping

% Load the impulse response file
ir = audioread(ir_file); % Read impulse response

% Apply convolution reverb (simulate reverb effect)
y_reverb = conv(x, ir, 'same'); % Convolution operation with 'same' output length

% Normalize the output signal
y_reverb = y_reverb / max(abs(y_reverb)); % Ensure the signal does not clip

% Save the processed audio with reverb
audiowrite('audio_with_reverb.wav', y_reverb, fs); % Write output file

% Plot the original and processed signals for comparison
figure;
subplot(2,1,1); % Create subplot for original signal
plot(x);
title('Original Audio Signal');
xlabel('Sample');
ylabel('Amplitude');

subplot(2,1,2); % Create subplot for reverb-processed signal
plot(y_reverb);
title('Audio Signal with Convolution Reverb');
xlabel('Sample');
ylabel('Amplitude');

% Play processed audio (optional)
% sound(y_reverb, fs);


