%% Step 1: Compare the Frequency Content of Two Audio Files

% Load the two audio files
x1 = audioread('audiosamples/task1sig.wav'); % Read first audio file
x2 = audioread('audiosamples/task2sig.wav'); % Read second audio file

fs1 = 44100; % Sample rate for first file (assumed 44.1 kHz)
fs2 = 44100; % Sample rate for second file (assumed same)

% Compute FFT and plot Magnitude Spectrum for File 1
figure;
subplot(2,1,1); % Create subplot for first audio file
n1 = length(x1); % Get the number of samples in first file
f1 = (0:n1-1)*(fs1/n1);  % Compute frequency vector for FFT
X1 = fft(x1);  % Compute the Fast Fourier Transform (FFT)
magnitude1 = abs(X1); % Get magnitude spectrum
plot(f1(1:floor(n1/2)), magnitude1(1:floor(n1/2))); % Plot only positive frequencies
xlabel('Frequency (Hz)');
ylabel('Magnitude');
title('Magnitude Spectrum of Audio File 1');

% Compute FFT and plot Magnitude Spectrum for File 2
subplot(2,1,2); % Create subplot for second audio file
n2 = length(x2); % Get number of samples in second file
f2 = (0:n2-1)*(fs2/n2);  % Compute frequency vector for second file
X2 = fft(x2);  % Compute FFT
magnitude2 = abs(X2); % Get magnitude spectrum
plot(f2(1:floor(n2/2)), magnitude2(1:floor(n2/2))); % Plot only positive frequencies
xlabel('Frequency (Hz)');
ylabel('Magnitude');
title('Magnitude Spectrum of Audio File 2');

% Compute and Plot Phase Spectrum for File 1
figure;
subplot(2,1,1); % Create subplot for first file
phase1 = angle(X1); % Compute phase spectrum (angle of FFT)
plot(f1(1:floor(n1/2)), phase1(1:floor(n1/2))); % Plot phase spectrum
xlabel('Frequency (Hz)');
ylabel('Phase (radians)');
title('Phase Spectrum of Audio File 1');

% Compute and Plot Phase Spectrum for File 2
subplot(2,1,2); % Create subplot for second file
phase2 = angle(X2); % Compute phase spectrum
plot(f2(1:floor(n2/2)), phase2(1:floor(n2/2))); % Plot phase spectrum
xlabel('Frequency (Hz)');
ylabel('Phase (radians)');
title('Phase Spectrum of Audio File 2');



